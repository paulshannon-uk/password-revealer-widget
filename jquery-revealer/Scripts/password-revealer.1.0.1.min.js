//-----------------------------------------
//	Javascript Password Revealer Widget
//	(c) Paul Shannon
//  email@paulshannon.co.uk
//	@paul_r_shannon
//	https://www.gnu.org/licenses/gpl.html
//-----------------------------------------
!function ($) { var passwordRevealer = function (e, t) { this.element = $(e), this.fields = []; var s = (t ? t.target : void 0) || this.element.attr(this.dataAttribute + "target") || ":password"; this.target = this.element.parents("form").find(s); var i = $.fn.jquery.toString().split("."); return this.jqueryVersion = { major: parseFloat(i[0]), minor: parseFloat(i[1]), revision: parseFloat(i[2]), valueOf: function () { return parseFloat(1e6 * this.major + 1e3 * this.minor + this.revision) } }, this._useProp = this.jqueryVersion.valueOf() >= 1006e3, this._options = $.extend(t, { debug: this.element.attr(this.dataAttribute + "debug") || !1, mode: this.element.attr(this.dataAttribute + "mode") || "hold", view: (this.element.attr(this.dataAttribute + "view") || "password").toLowerCase(), "native": this.element.attr(this.dataAttribute + "native") || !1, hiddencssclass: this.element.attr(this.dataAttribute + "hiddenCssClass") || "", iconclassselector: this.element.attr(this.dataAttribute + "iconClassSelector") || "glyphicon", passwordviewiconclass: this.element.attr(this.dataAttribute + "passwordViewIconClass") || "glyphicon-eye-open", textboxviewiconclass: this.element.attr(this.dataAttribute + "textboxViewIconClass") || "glyphicon-eye-close", oncreate: $.noop(), onchange: $.noop() }), this._validator("debug", this._options.debug), this._validator("native", this._options.native), this._validator("mode", this._options.mode), this._validator("view", this._options.view), this._log(this.jqueryVersion), this._log(this.jqueryVersion.valueOf()), this.create(), this }; passwordRevealer.prototype = { constructor: passwordRevealer, nameSpace: "PasswordRevealer", dataAttribute: "data-reveal-", _suppressNativeCSS: '<style type="text/css" id="PasswordRevealer_suppressNativeCSS">::-ms-reveal{display:none;}</style>', _HIDDEN_CSS_CLASS: "hiddencssclass", _log: function (e) { window.console && "false" !== this._options.debug && window.console.log(e) }, _destroyEvents: function () { this.element.unbind("click." + this.nameSpace).unbind("mousedown." + this.nameSpace).unbind("mouseup." + this.nameSpace).unbind("touchstart." + this.nameSpace).unbind("touchend." + this.nameSpace).unbind("keydown." + this.nameSpace).unbind("keyup." + this.nameSpace).unbind("create." + this.nameSpace).unbind("change." + this.nameSpace) }, _refreshView: function (e, t) { e.val() != t.val() && e.val(t.val()); var s = !1, i = this.options("hiddenCssClass"); if (0 == e.is(":visible")) { s = !0; var a = 1 == this._useProp ? t.prop("class") : t.attr("class"); e.addClass(a), e.insertBefore(t), t.appendTo("body"), "" == i ? (e.show(), t.hide()) : (e.removeClass(this.options("hiddenCssClass")), t.addClass(this.options("hiddenCssClass"))), 1 == this._useProp ? (e.prop("disabled", ""), t.prop("disabled", "disabled")) : (e.attr("disabled", ""), t.attr("disabled", "disabled")) } "click" == this.options("mode") && (t.focus(), t[0].selectionStart && t[0].selectionEnd && e[0].selectionStart && e[0].selectionEnd && (e[0].selectionStart = t[0].selectionStart, e[0].selectionEnd = t[0].selectionEnd)), this._destroyEvents(); var o = this; "function" == typeof o.options("onchange") && o.element.bind("change." + this.nameSpace, o.options("onchange")), "function" == typeof o.options("oncreate") && o.element.bind("create." + this.nameSpace, o.options("oncreate")); var n = function () { }; "click" == this.options("mode") ? (n = function (e) { o.options("view", "password" == o.options("view") ? "text" : "password"), o._log("password revealer: on" + e.type + " raised") }, this.element.bind("click." + this.nameSpace, n)) : (n = function (e) { var t = e.keyCode || e.which, s = 13 == t || 32 == t, i = "mousedown" == e.type || "mouseup" == e.type, a = "touchstart" == e.type || "touchend" == e.type, n = "mousedown" == e.type || "keydown" == e.type || "touchstart" == e.type; o.options("view", n && (i || s || a) ? "text" : "password"), o._log("password revealer: on" + e.type + " raised") }, o.element.bind("mousedown." + this.nameSpace, n).bind("mouseup." + this.nameSpace, n).bind("touchstart." + this.nameSpace, n).bind("touchend." + this.nameSpace, n).bind("keydown." + this.nameSpace, n).bind("keyup." + this.nameSpace, n)), s && this.element.trigger("change", { element: this.element[0], view: this._options.view }) }, _setOption: function (e, t) { 1 == this._validator(e, t) && (this._options[e] = t) }, _setOptions: function (e) { var t; for (t in e) this._setOption(t, e[t]); this.refresh() }, _validator: function (e, t) { var s = null == this._options[e] ? null : this._options[e].toString(), i = !1; switch (e.toString().toLowerCase()) { case "debug": case "native": i = "true" == s || "false" == s; break; case "mode": i = "click" == s || "hold" == s; break; case "view": i = "password" == s || "text" == s; break; case "target": this._log("'target' option can only be set during widget initialization"), i = !1; break; case "hiddencssclass": case "iconclassselector": case "passwordviewiconclass": case "textboxviewiconclass": case "onchange": case "oncreate": i = !0; break; default: return this._log("'" + e + "' is not a valid option name."), null } return 0 == i && this._log("Value '" + t + "' for option '" + e + "' is not valid."), i }, create: function () { var e = this; $(this.target).each(function () { "" == this.name && (this.name = "password_" + (new Date).toString(), e._log("A 'name' attribute is required on password field for this widget.  Automatically set as '" + this.name + "'")); var t = $(this), s = e._useProp ? $(this).prop("class") : $(this).attr("class"), i = e._useProp ? $(this).prop("disabled") : $(this).attr("disabled"), a = e._useProp ? $(this).prop("style") : $(this).attr("style"), o = e._useProp ? $(this).prop("placeholder") : $(this).attr("placeholder"), n = $("<input type='text' />").addClass(s).addClass(e.options("hiddenCssClass")).attr("disabled", i ? i : "").attr("name", this.name ? this.name : "").attr("style", a ? a : "").attr("placeholder", o ? o : "").appendTo("body:first"); "" == e.options("hiddenCssClass") && n.hide(), e.fields.push([n, t]), t.bind("change." + e.nameSpace, function () { n.val(t.val()), e._log("password revealer: password field onchange raised") }), n.bind("change." + e.nameSpace, function () { t.val(n.val()), e._log("password revealer: textbox field onchange raised") }), $("label[for='" + t.attr("id") + "']").bind("click." + e.nameSpace, function () { 1 == n.is(":visible") && n.focus(), e._log("password revealer: field label onclick raised") }) }), this.refresh(), this.element.trigger("create", { element: this.element[0], ui: this.options }) }, destroy: function () { "password" != e.options("view") && e.setOption("view", "password"), this._destroyEvents(); var e = this; $.each(this.target, function () { var t = $(this[0]), s = $(this[1]); s.unbind("change." + e.nameSpace), t.unbind("change." + e.nameSpace), $("label[for='" + s.attr("id") + "']").unbind("click." + e.nameSpace) }), delete $(this).data(this.nameSpace) }, options: function (key, value) { var options = key, parts, curOption, i; if (0 === arguments.length) return $.extend({}, this.options); if ("string" == typeof key) { if (options = {}, parts = key.toLowerCase().split("."), key = parts.shift(), parts.length) { for (curOption = this._options[key], i = 0; i < parts.length - 1; i++) curOption && (curOption[parts[i]] = curOption[parts[i]] || {}, curOption = curOption[parts[i]]); if (key = parts.pop(), !curOption) return 1 === arguments.length ? null : this; if (1 === arguments.length) return void 0 === curOption[key] ? null : curOption[key]; curOption[key] = value } else { if (1 === arguments.length) return void 0 === this._options[key] && 1 == this.constructor.prototype.hasOwnProperty(key) ? (eval("this." + key + "()"), this) : void 0 === this._options[key] ? null : this._options[key]; this._setOption(key, value) } this.refresh() } else this._setOptions(options); return this }, refresh: function () { var e = this, t = "#" + this.nameSpace + "_suppressNativeCSS"; "false" == this.options("native").toString() ? 0 == $(t).length && $("head").append(this._suppressNativeCSS) : $("head").remove("#" + this.nameSpace + "_suppressNativeCSS"), "click" == e.options("mode") && e.element.find("." + e.options("iconClassSelector")).toggleClass(e.options("passwordViewIconClass")).toggleClass(e.options("textboxViewIconClass")); var s = e.element.find("." + e.options("iconClassSelector")); return 0 == s.length && (s = $("<span>").addClass(e.options("iconClassSelector")), e.element.prepend(s)), s.toggleClass(e.options("passwordViewIconClass"), "password" == e.options("view")).toggleClass(e.options("textboxViewIconClass"), "text" == e.options("view")), $.each(this.fields, function () { var t = $(this[0]), s = $(this[1]); "password" == e.options("view") ? e._refreshView(s, t) : e._refreshView(t, s) }), this }, toggle: function () { return "click" == this.options("view") ? this.element.click() : this._log("toggle() method not valid when 'view' option is set to a value of 'hold'"), this } }, $.fn.passwordRevealer = function (e, t) { var s = [], i = $(this).each(function () { var i = $(this), a = i.data(passwordRevealer.prototype.nameSpace); if ("string" == typeof e) { if (a) { var o = void 0 == t ? a.options(e) : a.options(e, t); "undefined" != typeof o && s.push(o) } } else a ? s.push(a) : (i.data(passwordRevealer.prototype.nameSpace, new passwordRevealer(this, e)), s.push(i.data(passwordRevealer.prototype.nameSpace))) }); return 1 == s.length ? s[0] : s.length ? s : i } }(this.jQuery), $(function () { $("[data-reveal='true']").each(function () { var e = $(this); e.passwordRevealer() }) });